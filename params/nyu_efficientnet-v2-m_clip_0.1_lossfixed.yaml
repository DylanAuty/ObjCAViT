# test/scratch parameter file

basic:
  # name:                 # Name override. If "None", "none" or blank, or if not present, will use params filename.
  dataset: nyu          # Switch between different datasets.
  batch_size: 8         # Batch size. 
  max_epochs: 25        # Number of epochs to do
  validate_every: 1     # Run val every N epochs
  # from_checkpoint: ./runs/nyu_efficientnet-b1_1/version_0/checkpoints/epoch=0-step=3029.ckpt
  # from_checkpoint: ./TEST_CHKPT.pt

optimizer:
  name: adamw
  lr: 0.000357      # Learning rate to use
  wd: 0.1           # Weight decay to use
  slow_encoder: 10  # If not none, encoder learning rate will be optimizer.lr / optimizer.slow_encoder.
  # use_swa: True     # If true, discards the OneCycle LR scheduler and uses stochastic weight averaging instead.

  # 1-Cycle LR Scheduler params
  div_factor: 25    
  final_div_factor: 100
  # Gradient norm clipping factor - leave out or set to 0 to disable.
  gradient_clip_val: 0.1

model:
  name: adabins         # Name of model to use. Model-specific settings should be in args[args.model.name].

adabins:
  n_bins: 256
  # encoder_name: efficientnet-b1
  # encoder_name: efficientnet-b5
  # encoder_name: efficientnet-v2-s
  encoder_name: efficientnet-v2-m

paths:  # Dataset-agnostic path information
  data_dir: ./data      # Path to folder containing the nyu folder
  run_dir: ./runs       # Path to tensorboard run dir.

loss: # Information about different loss functions
  names: ['silog', 'bins_chamfer']      # List of different loss functions to use.
  coeffs: [1, 0.1]           # List of multipliers for the loss functions. Order follows loss_names.

dataset:  # Dataset-agnostic settings (see DepthDataset wrapper class)
  do_kb_crop: False       # If set, crop input images as KITTI benchmark images
  do_random_rotate: True  # If set, applies random rotation of +- args.dataset.degree to each batch
  degree: 2.5             # Random rotation angle
  # During training, images are randomly cropped to the below dimensions
  input_height: 416
  input_width: 544

nyu:  # Even if NYU isn't being used, this has information about NYUD2-specific things
  filenames_file_train:  ./datasets/split_filenames_files/nyudepthv2_train_files_with_gt.txt
  filenames_file_eval: ./datasets/split_filenames_files/nyudepthv2_test_files_with_gt.txt
  base_path: nyu   # Base path beneath args.paths.data_dir containing nyu
  train_path: sync  # Path beneath args.nyu.base_path containing the files found in the train filenames file
  eval_path: official_splits/test # As above, with the test filenames file

  # Norming factors: PIL images are converted to numpy arrays, then to tensors, then divided by these factors.
  image_norm_factor: 255.0
  depth_norm_factor: 1000.0

  # Minimum and maximum depth values. Used for both training and evaluation. In metres.
  # that it remains dataset-agnostic.
  min_depth: 0.001
  max_depth: 10

  # Crop settings for use before computing metrics
  eigen_crop: True        # Do Eigen crop when calculating metrics
  garg_crop: False

hardware:
  num_workers: 8        # For use by the dataloaders